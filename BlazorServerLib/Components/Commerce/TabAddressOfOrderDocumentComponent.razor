@using BlazorWebLib.Components.Helpdesk
@using MudBlazor
@inherits OffersTableBaseComponent
<div class="mb-3">
    <CascadingValue Value="RubricSelectAction">
        <CascadingValue Value="RubricMetadataShadow">
            <RubricSelectorComponent @ref="ref_rubric" Title="Склад" ContextName="@GlobalStaticConstants.Routes.WAREHOUSE_CONTROLLER_NAME" ModeSelectingRubrics="ModesSelectRubricsEnum.SelectAny" ShowDisabledRubrics="true" ParentRubric="0" StartRubric="CurrentTab.WarehouseId" />
        </CascadingValue>
    </CascadingValue>
</div>
<MudTable Hover="true"
          ReadOnly="ReadOnly"
          SortLabel="@(nameof(RowOfOrderDocumentModelDB.Goods.Name))"
          CanCancelEdit="true"
          Items="@CurrentTab.Rows"
          RowEditPreview="RowEditPreviewHandler"
          RowEditCommit="RowEditCommitHandler"
          CancelEditIcon="@Icons.Material.Filled.Cancel"
          CancelEditTooltip="Отменить изменение"
          CommitEditTooltip="Сохранить изменения"
          RowEditCancel="RowEditCancelHandler"
          EditTrigger="@EditTrigger">

    <ToolBarContent>
        <MudText Typo="Typo.h6">
            Номенклатура
            @{
                decimal sum_of_tab = CurrentTab.Rows!.Select(x => x.Offer!.Price * x.Quantity).Sum();
            }
            @if (sum_of_tab > 0)
            {
                <text>: </text>

                <span class="text-primary-emphasis">@sum_of_tab</span> <text>руб.</text>
            }
        </MudText>
        <MudSpacer />
        @if (!ReadOnly)
        {
            <div class="ms-3">
                <AddRowToOrderDocumentComponent @ref="addingDomRef" AllOffers="allOffers" CurrentRows="CurrentTab.Rows!.Select(x=>x.OfferId).ToList()" AddingOfferHandler="AddingOfferAction" />
            </div>
        }
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col style="width:50px;" />
        @if (EditTrigger == TableEditTrigger.EditButton)
        {
            <col style="width:50px;" />
        }
    </ColGroup>
    <HeaderContent>
        <MudTh>Название</MudTh>
        <MudTh>Остаток</MudTh>
        <MudTh>Цена</MudTh>
        <MudTh>Количество</MudTh>
        <MudTh>Сумма</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            @context!.Offer!.GetName()
        </MudTd>
        <MudTd DataLabel="Остаток">
            @(this.RegistersCache.Where(x => x.OfferId == context.OfferId && x.WarehouseId == CurrentTab.WarehouseId).Sum(x => x.Quantity))
        </MudTd>
        <MudTd DataLabel="Price">
            @context!.Offer!.Price руб. (@($"{Math.Round(context!.Offer!.Price / context!.Offer.Multiplicity, 2)} р/{context.Goods!.BaseUnit.DescriptionInfo().ToLower()}"))
        </MudTd>
        <MudTd DataLabel="Quantity">
            @context!.Quantity
        </MudTd>
        <MudTd DataLabel="Sum">
            @(context!.Quantity * context.Offer!.Price)
        </MudTd>
        <MudTd><MudIconButton OnClick="() => DeleteRow(context.OfferId)" title="Удалить строку" Icon="@Icons.Material.Filled.Delete" aria-label="delete" Size="Size.Small" /></MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Name">
            @context?.Offer?.GetName()
        </MudTd>
        <MudTd DataLabel="Price">
            @(context.Offer!.Price)
        </MudTd>
        <MudTd DataLabel="Quantity">
            <MudNumericField @bind-Value="context!.Quantity" Required Min="1" />
        </MudTd>
        <MudTd colspan="2">
            @(context!.Quantity * context.Offer!.Price)
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>