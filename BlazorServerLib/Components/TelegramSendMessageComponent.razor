@using Microsoft.Extensions.Options
@attribute [Authorize]
@inherits BlazorBusyComponentBaseAuthModel
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IWebAppService tgWebRepo
@inject ITelegramTransmission tgRepo
@inject IUsersProfilesService UsersManageRepo
@inject IOptions<TelegramBotConfigModel> conf

@if (ShowForm)
{
    @if (string.IsNullOrEmpty(errorMessage))
    {
        <form @onsubmit="SendMessage">
            <div class="input-group input-group-sm">
                <span class="input-group-text" id="inputGroup-sizing-sm">Сообщение</span>
                <input disabled="@IsBusyProgress" @bind-value="messageText" @bind-value:event="oninput" type="text" placeholder="@placeholder" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-sm">
                <button disabled="@(string.IsNullOrWhiteSpace(messageText) || IsBusyProgress)" class="btn btn-outline-secondary" type="submit" id="button-addon2">Отправить</button>
                <button disabled="@IsBusyProgress" title="Закрыть форму" @onclick="ToggleShow" class="btn btn-outline-secondary" type="button" id="button-addon2">
                    @if (IsBusyProgress)
                    {
                        <span class="spinner-border spinner-border-sm me-2" aria-hidden="true"></span>
                    }
                    <span>Закрыть</span>
                </button>
            </div>
        </form>
    }
    else
    {
        <p>@errorMessage</p>
    }
}
else
{
    <span @onclick="ToggleShow" class="bi bi-telegram mx-1 tg-show-form" title="Telegram аккаунт"></span>
}

@code {
    [Parameter, EditorRequired]
    public long TelegramId { get; set; } = default!;


    TelegramUserBaseModel TelegramUser = default!;

    string? messageText;
    bool ShowForm;

    string placeholder = "Текст сообщения";

    string? errorMessage;


    protected override async Task OnInitializedAsync()
    {
        await ReadCurrentUser();
    }

    async Task SendMessage()
    {
        errorMessage = null;
        await SetBusy();
        TResponseModel<TelegramUserBaseModel> tg_user_info = await tgWebRepo.GetTelegramUserCachedInfo(TelegramId);

        if (!tg_user_info.Success())
            errorMessage += $"\n{tg_user_info.Message()}";

        TelegramUser = tg_user_info.Response ?? throw new Exception($"error {{6090D4EA-4B24-47E1-8090-6272549BDAFB}}\n{tg_user_info.Message()}");

        TResponseModel<MessageComplexIdsModel> rest = await tgRepo.SendTextMessageTelegram(new SendTextMessageTelegramBotModel()
            {
                From = $"<a href='{conf.Value.BaseUri}'>{conf.Value.ClearBaseUri}</a> (от: {CurrentUserSession?.UserName})",
                UserTelegramId = TelegramUser.TelegramId,
                Message = messageText!
            });
        IsBusyProgress = false;
        if (!rest.Success())
            errorMessage = rest.Message();
        else
        {
            placeholder = $"отправлено: {messageText}";
            messageText = "";

        }
    }

    void ToggleShow()
    {
        ShowForm = !ShowForm;
        if (!ShowForm)
            messageText = null;
    }
}