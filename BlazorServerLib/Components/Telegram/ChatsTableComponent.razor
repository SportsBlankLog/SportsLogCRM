@inherits BlazorBusyComponentBaseModel

@using BlazorWebLib.Components.Helpdesk.issue
@using MudBlazor

<style>
    .issues-for-chat-info{
        cursor:pointer;
    }
</style>

<MudTable ServerData="ServerReload" Dense="true" Hover="true" @ref="table" Loading="IsBusyProgress">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Чаты TelegramBot`а</MudText>
        <MudSpacer />
        <MudTextField title="без учёта регистра = регистронезависимый поиск" T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Поиск по: Title, Username, FirstName, LastName" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortLabel="@(nameof(ChatTelegramModelDB.LastUpdateUtc))" T="ChatTelegramModelDB">Updated</MudTableSortLabel></MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Username</MudTh>
        <MudTh>FirstName</MudTh>
        <MudTh>LastName</MudTh>
        <MudTh>About</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@(nameof(ChatTelegramModelDB.LastUpdateUtc))">
            <a href="@($"/helpdesk/telegram-chat-page/{context.Id}")">@context.LastUpdateUtc.ToShortDateString()<sup>@context.LastUpdateUtc.ToShortTimeString()</sup></a>
        </MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Type">@context.Type.DescriptionInfo()</MudTd>
        <MudTd DataLabel="Username">@(string.IsNullOrWhiteSpace(context.Username) ? "" : $"@{context.Username}")</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="About">
            @if (context.Type == ChatsTypesTelegramEnum.Private)
            {
                UserInfoModel? user = UsersCache.FirstOrDefault(x => x.TelegramId == context.ChatTelegramId);
                IssueHelpdeskModel[]? issues = user is null || !IssuesCache.TryGetValue(user.UserId, out IssueHelpdeskModel[]? issues_cached)
                ? null
                : issues_cached;

                if (user is null)
                {
                    <b>ошибка. не найден пользователь</b>
                }
                else
                {
                    <span>@user.RolesAsString(";")</span>
                }
                @if (issues is not null)
                {
                    <IssuesForChatComponent Issues="issues" />
                }
            }
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Ни чего не найдено</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Загрузка...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>