@page "/Account/Manage/SetPassword"
@attribute [Authorize]
@inject IdentityRedirectManager RedirectManager
@inject IUsersProfilesService UsersProfilesRepo

<PageTitle>Установка пароля</PageTitle>

<h3>Установите свой пароль</h3>
<StatusMessage Messages="@Messages" />
<p class="text-info">
    У вас нет локального имени пользователя и пароля для этого сайта. Добавить локального
    учетную запись, чтобы вы могли войти в систему без внешнего входа.
</p>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="set-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" placeholder="Пожалуйста, введите новый пароль." />
                <label for="new-password" class="form-label">Новый пароль</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" placeholder="Пожалуйста, подтвердите свой новый пароль." />
                <label for="confirm-password" class="form-label">Подтвердите пароль</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Установка пароля</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private SetNewPasswordModel Input { get; set; } = new();

    List<ResultMessage>? Messages;
    private UserInfoModel user = default!;

    protected override async Task OnInitializedAsync()
    {
        UserBooleanResponseModel hasPassword = await UsersProfilesRepo.UserHasPasswordAsync();
        Messages = hasPassword.Messages;
        if (hasPassword.Response == true || hasPassword.UserInfo is null)
        {
            RedirectManager.RedirectTo("Account/Manage/ChangePassword");
        }
        user = hasPassword.UserInfo;
    }

    private async Task OnValidSubmitAsync()
    {
        Messages = null;
        ResponseBaseModel rest = await UsersProfilesRepo.AddPasswordAsync(Input.NewPassword!);
        Messages = rest.Messages;
        if (!rest.Success())
            return;
        Messages.Add(new() { TypeMessage = ResultTypesEnum.Warning, Text = "Ваш пароль установлен." });
    }
}