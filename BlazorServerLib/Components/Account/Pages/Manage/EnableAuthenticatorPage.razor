@page "/Account/Manage/EnableAuthenticator"

@using System.Text.Encodings.Web
@using System.Net.Mail
@using System.Text
@using System.Globalization

@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject IUsersProfilesService UsersProfilesRepo

<PageTitle>Настроить приложение для аутентификации</PageTitle>

@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
}
else
{
    <StatusMessage Messages="@Messages" />
    <h3>Настроить приложение для аутентификации</h3>
    <div>
        <p>Чтобы использовать приложение для аутентификации, выполните следующие действия:</p>
        <ol class="list">
            <li>
                <p>
                    Загрузите приложение двухфакторной аутентификации, например Microsoft Authenticator, для
                    <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a> и
                    <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a> или
                    Google Authenticator для
                    <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a> и
                    <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a>.
                </p>
            </li>
            <li>
                <p>Отсканируйте QR-код или введите этот ключ <kbd>@sharedKey</kbd> в приложение двухфакторной аутентификации. Пробелы и регистр не имеют значения.</p>
                <div class="alert alert-info">Узнайте, как <a href="https://go.microsoft.com/fwlink/?Linkid=852423">включить генерацию QR-кода</a>.</div>
                <div></div>
                <div data-url="@authenticatorUri"></div>
            </li>
            <li>
                <p>
                    После того, как вы отсканируете QR-код или введете указанный выше ключ, ваше приложение двухфакторной аутентификации предоставит вам
                    с уникальным кодом. Введите код в поле подтверждения ниже.
                </p>
                <div class="row">
                    <div class="col-md-6">
                        <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                            <DataAnnotationsValidator />
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.Code" class="form-control" autocomplete="off" placeholder="Пожалуйста, введите код." />
                                <label for="code" class="control-label form-label">Проверочный код</label>
                                <ValidationMessage For="() => Input.Code" class="text-danger" />
                            </div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary">Проверить</button>
                            <ValidationSummary class="text-danger" role="alert" />
                        </EditForm>
                    </div>
                </div>
            </li>
        </ol>
    </div>
}

@code {
    [Inject]
    AuthenticationStateProvider authRepo { get; set; } = default!;

    [SupplyParameterFromForm]
    private CodeSingleModel Input { get; set; } = new();

    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private UserInfoMainModel user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    List<ResultMessage> Messages = [];
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await authRepo.GetAuthenticationStateAsync();
        user = state.User.ReadCurrentUserInfo() ?? throw new Exception();
        await LoadSharedKeyAndQrCodeUriAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        // Strip spaces and hyphens
        string verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);
        TResponseModel<bool?> is_2fa_token_valid_rest = await UsersProfilesRepo.VerifyTwoFactorTokenAsync(verificationCode);
        Messages = is_2fa_token_valid_rest.Messages;
        if (is_2fa_token_valid_rest.Response != true)
        {
            Messages.Add(new ResultMessage() { TypeMessage = ResultTypesEnum.Error, Text = "Ошибка: код подтверждения недействителен." });
            return;
        }

        ResponseBaseModel stf_res = await UsersProfilesRepo.SetTwoFactorEnabledAsync(true);
        Messages.AddRange(stf_res.Messages);
        if (!stf_res.Success())
            return;

        Messages.Add(new ResultMessage() { TypeMessage = ResultTypesEnum.Success, Text = "Ваше приложение-аутентификатор проверено." });

        TResponseModel<int?> cnt_rc = await UsersProfilesRepo.CountRecoveryCodesAsync();
        Messages.AddRange(cnt_rc.Messages);
        if (!cnt_rc.Success() || cnt_rc.Response is null)
            return;

        if (cnt_rc.Response.Value == 0)
        {
            TResponseModel<IEnumerable<string>?> rc_res = await UsersProfilesRepo.GenerateNewTwoFactorRecoveryCodesAsync();
            Messages.AddRange(rc_res.Messages);
            recoveryCodes = rc_res.Response;
        }
        else
        {
            message = "Ваше приложение-аутентификатор проверено.";
            Messages.Add(new() { TypeMessage = ResultTypesEnum.Info, Text = message });
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync()
    {
        string msg;
        if (!MailAddress.TryCreate(user.Email, out _))
        {
            msg = "email имеет не корректный формат. error {F0A2EF98-5C04-46D2-8A93-711BC9827EF9}";
            Messages.Add(new ResultMessage() { TypeMessage = ResultTypesEnum.Error, Text = msg });
            throw new Exception(msg);
        }

        // Load the authenticator key & QR code URI to display on the form
        TResponseModel<string?> unformatted_key_rest = await UsersProfilesRepo.GetAuthenticatorKeyAsync();
        if (string.IsNullOrEmpty(unformatted_key_rest.Response))
        {
            msg = "string.IsNullOrEmpty(unformatted_key_rest.ResponseString). error {F0A2EF98-5C04-46D2-8A93-711BC9827EF9}";
            Messages.Add(new ResultMessage() { TypeMessage = ResultTypesEnum.Error, Text = msg });
            throw new Exception(msg);
        }

        sharedKey = FormatKey(unformatted_key_rest.Response);
        authenticatorUri = GenerateQrCodeUri(user.Email, unformatted_key_rest.Response);
    }

    private string FormatKey(string unformattedKey)
    {
        StringBuilder result = new();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }
}