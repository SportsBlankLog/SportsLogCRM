@page "/Account/ResetPassword"
@using System.Text
@using Microsoft.AspNetCore.WebUtilities

@inject IdentityRedirectManager RedirectManager
@inject IUsersProfilesService UsersProfilesRepo

<PageTitle>Сброс пароля</PageTitle>

<h1>Сброс пароля</h1>
<h2>Сбросьте пароль.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <StatusMessage Messages="@Messages" />
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Пожалуйста введите ваш пароль." />
                <label for="password" class="form-label">Пароль</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Пожалуйста, подтвердите свой пароль." />
                <label for="confirm-password" class="form-label">Подтвердите пароль</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Сброс</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginWithCodeModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    IEnumerable<ResultMessage>? Messages;

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        UserInfoModel? user = await UsersProfilesRepo.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        ResponseBaseModel result = await UsersProfilesRepo.ResetPasswordAsync(user.UserId, Input.Code, Input.Password);
        Messages = result.Messages;
        if (result.Success())
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }
    }
}