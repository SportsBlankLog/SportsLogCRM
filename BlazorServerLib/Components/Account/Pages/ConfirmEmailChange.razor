@page "/Account/ConfirmEmailChange"
@using System.Text
@using Microsoft.AspNetCore.WebUtilities

@inject IdentityRedirectManager RedirectManager
@inject IUsersProfilesService UserProfilesManage
@inject IUsersAuthenticateService UserAuthManager

<PageTitle>Подтвердить изменение адреса электронной почты</PageTitle>

<h1>Подтвердить изменение адреса электронной почты</h1>
<StatusMessage Messages="@Messages" />

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    List<ResultMessage> Messages = [];

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Email is null || Code is null)
        {
            Messages = [new ResultMessage() { TypeMessage = ResultTypesEnum.Error, Text = "Ошибка: неверная ссылка для подтверждения изменения адреса электронной почты." }];
            return;
        }

        TResponseModel<UserInfoModel?> user = await UserProfilesManage.FindByIdAsync(UserId);
        Messages = user.Messages;
        if (user.Response is null)
        {
            Messages.Add(new() { TypeMessage = ResultTypesEnum.Error, Text = $"Невозможно найти пользователя по идентификатору '{UserId}'" });
            return;
        }

        string code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        ResponseBaseModel result = await UserProfilesManage.ChangeEmailAsync(user.Response.UserId, Email, code);
        Messages = result.Messages;
    }
}