@using BlazorWebLib.Components.Constructor.Pages
@using SharedLib.Models

@inherits BlazorBusyComponentBaseModel

<div class="vstack gap-3">
    <div class="p-2"><h3>Генерация кода C#</h3></div>

    <CascadingValue Value="this">
        <div class="p-2">
            <ConfigManufactureComponent @ref="_conf" />
        </div>
        <div class="p-2">
            <CascadingValue Value="@ParentFormsPage.SystemNamesManufacture.Where(x => x.TypeDataName.StartsWith(DirectoryTypeName)).ToArray()">
                <EnumerationsManufactureComponent @ref="enumerations_ref" />
            </CascadingValue>
        </div>
        <div class="p-2">
            <CascadingValue Value="@ParentFormsPage.SystemNamesManufacture.Where(x => x.TypeDataName.StartsWith(DocumentSchemeConstructor)).ToArray()">
                <DocumentsManufactureComponent />
            </CascadingValue>
        </div>
    </CascadingValue>

    <div class="d-grid gap-2">
        <button @onclick="Download" class="btn btn-primary" type="button">Скачать C# .NET</button>
    </div>
</div>

@code {
    [Inject]
    IConstructorService ConstructorRepo { get; set; } = default!;

    [Inject]
    ISnackbar SnackbarRepo { get; set; } = default!;

    [Inject]
    IManufactureService ManufactureRepo { get; set; } = default!;


    /// <summary>
    /// Родительская страница форм
    /// </summary>
    [CascadingParameter, EditorRequired]
    public required ConstructorPage ParentFormsPage { get; set; }


    ConfigManufactureComponent _conf = default!;

    EnumerationsManufactureComponent enumerations_ref = default!;

    const string DirectoryTypeName = nameof(DirectoryConstructorModelDB);
    const string DocumentSchemeConstructor = nameof(DocumentSchemeConstructorModelDB);

    public ProjectConstructorModelDB CurrentProject { get; private set; } = default!;
    public ManageManufactureModelDB Manufacture { get; private set; } = default!;

    void Download()
    {
        ArgumentNullException.ThrowIfNull(CurrentProject.Directories);
        ArgumentNullException.ThrowIfNull(CurrentProject.Documents);
        ArgumentNullException.ThrowIfNull(ParentFormsPage.MainProject);

        Func<DirectoryConstructorModelDB, EnumFitModel> enum_convert = (DirectoryConstructorModelDB dir) =>
        {
            ArgumentNullException.ThrowIfNull(dir.Elements);

            string get_sn = ParentFormsPage
            .SystemNamesManufacture
            .FirstOrDefault(x => x.TypeDataName == DirectoryTypeName)?.SystemName ?? GlobalTools.TranslitToSystemName(dir.Name);

            return new EnumFitModel()
                {
                    SystemName = get_sn,
                    Name = dir.Name,
                    Description = dir.Description,
                    EnumItems = dir.Elements.Select(e => new SortableFitModel()
                    {
                        Name = e.Name,
                        SortIndex = e.SortIndex,
                        Description = e.Description,
                    }).ToArray()
                };
        };

        Func<DocumentSchemeConstructorModelDB, DocumentFitModel> document_convert = (DocumentSchemeConstructorModelDB doc) =>
        {
            string get_sn = ParentFormsPage
            .SystemNamesManufacture
            .FirstOrDefault(x => x.TypeDataName == DocumentSchemeConstructor)?.SystemName ?? GlobalTools.TranslitToSystemName(doc.Name);

            return new DocumentFitModel()
                {
                    SystemName = get_sn,
                    Name = doc.Name,
                    Description = doc.Description,
                };
        };

        StructureProjectModel struct_project = new StructureProjectModel()
            {
                Enums = CurrentProject.Directories.Select(enum_convert),
                Documents = CurrentProject.Documents.Select(document_convert)
            };

        CodeGeneratorConfigModel conf_gen = new() { Namespace = "" };

        GeneratorCSharpService gen = new(conf_gen, ParentFormsPage.MainProject);
    }

    public async Task ReloadProjectData()
    {
        IsBusyProgress = true;
        ProjectConstructorModelDB? rest_project = await ConstructorRepo.ReadProject(ParentFormsPage.MainProject!.Id);
        CurrentProject = rest_project ?? throw new Exception();

        TResponseModel<ManageManufactureModelDB> rest_manufacture = await ManufactureRepo.ReadManufactureConfig(ParentFormsPage.MainProject.Id);
        if (!rest_manufacture.Success())
            SnackbarRepo.ShowMessagesResponse(rest_manufacture.Messages);
        Manufacture = rest_manufacture.Response ?? throw new Exception();
        IsBusyProgress = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadProjectData();
    }
}