<div class="card">
    <div class="card-body">
        <h5 class="card-title">Документы</h5>
        <h6 class="card-subtitle mb-2 text-body-secondary">бизнес-сущности</h6>

        <MudTreeView @ref="TreeView_ref" Items="@TreeItems" Hover="true">
            <ItemTemplate Context="item">
                <MudTreeViewItem Items="@item.Children" Icon="@item.Icon" IconColor="@GetColor(item.Icon)">
                    <BodyContent>
                        <SystemNameManufactureComponent Item="item" />
                    </BodyContent>
                </MudTreeViewItem>
            </ItemTemplate>
        </MudTreeView>
    </div>
</div>

@code {
    [CascadingParameter, EditorRequired]
    public required ManufactureComponent ManufactureParentView { get; set; }

    [CascadingParameter, EditorRequired]
    public required SystemNameEntryModel[] SystemNamesManufacture { get; set; }

    List<TreeItemData<EntryTagModel>> TreeItems { get; set; } = [];

    const string icon_doc = Icons.Material.Filled.BusinessCenter;
    const string icon_tab_of_doc = Icons.Material.Filled.Tab;
    const string icon_form_of_tab = Icons.Material.Filled.DynamicForm;
    const string icon_field_of_form = Icons.Material.Filled.DragHandle;

    /// <summary>
    /// имя типа данных: документы
    /// </summary>
    const string type_name_document = nameof(DocumentSchemeConstructorModelDB);
    /// <summary>
    /// имя типа данных: табы/вкладки документов
    /// </summary>
    const string type_name_tab_of_document = nameof(TabOfDocumentSchemeConstructorModelDB);
    /// <summary>
    /// имя типа данных: формы
    /// </summary>
    const string type_name_form_of_tab = nameof(FormConstructorModelDB);
    /// <summary>
    /// имя типа данных: поля формы
    /// </summary>
    const string type_name_field_of_form = nameof(FieldFormConstructorModelDB);

    MudTreeView<EntryTagModel>? TreeView_ref;


    Color GetColor(string? icon)
    => icon switch
    {
        icon_form_of_tab => Color.Info,
        icon_tab_of_doc => Color.Primary,
        icon_field_of_form => Color.Success,
        _ => Color.Default
    };

    static TypesFieldsFormsEnum[] skip_fields = [TypesFieldsFormsEnum.Generator, TypesFieldsFormsEnum.ProgramCalculationDouble];

    protected override void OnInitialized()
    {
        Func<FieldFormBaseLowConstructorModel, int, int, int, TreeItemDataModel> FieldToTreeItem = (FieldFormBaseLowConstructorModel field, int doc_id, int tab_id, int form_id) =>
                {
                    EntryTagModel et = new EntryTagModel()
                        {
                            Id = field.Id,
                            Name = field.Name,
                            Tag = $"{type_name_document}#{doc_id} {type_name_tab_of_document}#{tab_id} {type_name_form_of_tab}#{form_id} {type_name_field_of_form}"
                        };

                    return new TreeItemDataModel(et, icon_field_of_form)
                        {
                            Tooltip = "Поле внутри формы"
                        };
                };

        Func<FormConstructorModelDB, int, int, TreeItemDataModel> FormToTreeItem = (FormConstructorModelDB form, int doc_id, int tab_id) =>
                            {
                                EntryTagModel et = new EntryTagModel()
                                    {
                                        Id = form.Id,
                                        Name = form.Name,
                                        Tag = $"{type_name_document}#{doc_id} {type_name_tab_of_document}#{tab_id} {type_name_form_of_tab}"
                                    };

                                Func<FieldFormBaseLowConstructorModel, bool> fieldPredicate = (FieldFormBaseLowConstructorModel field) =>
                                {
                                    if (field is FieldFormConstructorModelDB ff && skip_fields.Contains(ff.TypeField))
                                    {
                                        if (skip_fields.Contains(ff.TypeField))
                                            return false;
                                        if (Enum.TryParse(ff.GetValueObjectOfMetadata(MetadataExtensionsFormFieldsEnum.Descriptor, PropsTypesMDFieldsEnum.None.ToString())?.ToString(), out PropsTypesMDFieldsEnum _mode))
                                            return _mode != PropsTypesMDFieldsEnum.Template;
                                    }

                                    return true;
                                };

                                return new TreeItemDataModel(et, icon_form_of_tab)
                                    {
                                        Tooltip = "Форма, размещённая внутри таба/вкладки",
                                        Children = [.. form.AllFields.Where(fieldPredicate).Select(field => FieldToTreeItem(field, doc_id, tab_id, form.Id))]
                                    };
                            };

        Func<TabOfDocumentSchemeConstructorModelDB, int, TreeItemDataModel> TabToTreeItem = (TabOfDocumentSchemeConstructorModelDB tab, int doc_id) =>
                {
                    EntryTagModel et = new EntryTagModel()
                        {
                            Id = tab.Id,
                            Name = tab.Name,
                            Tag = $"{type_name_document}#{doc_id} {type_name_tab_of_document}"
                        };

                    return new TreeItemDataModel(et, icon_tab_of_doc)
                        {
                            Tooltip = "Вкладка/Таб документа",
                            Children = [.. tab.JoinsForms!.Select(x => FormToTreeItem(x.Form!, doc_id, tab.Id))]
                        };
                };

        ManufactureParentView
        .CurrentProject
        .Documents!.ForEach(x =>
        {
            TreeItems.Add(new TreeItemDataModel(new EntryTagModel() { Name = x.Name, Id = x.Id, Tag = type_name_document }, icon_doc)
                {
                    Tooltip = "Документ (схема данных бизнес-сущности)",
                    Children = [.. x.Pages!.Select(y => TabToTreeItem(y, x.Id))]
                });
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (TreeView_ref is not null && firstRender)
            await TreeView_ref.ExpandAllAsync();
    }
}
