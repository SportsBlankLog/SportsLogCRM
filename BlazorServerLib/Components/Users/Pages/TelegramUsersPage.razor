@page "/Users/TelegramUsers"

@using System.Net.Mail
@attribute [Authorize(Roles = GlobalStaticConstants.Roles.Admin)]

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IWebAppService TelegramRepo

<PageTitle>Telegram пользователи</PageTitle>
<StatusMessage Messages="@Messages" />
<h3>Telegram пользователи</h3>

<div class="row">
    <div class="grid">
        <form @onsubmit="UsersFilter">
            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text">Фильтр</span>
                <InputText @bind-Value="nameFilter" class="form-control" aria-required="true" placeholder="поиск пользователей" />
                <button type="submit" class="btn btn-outline-secondary">Найти</button>
            </div>
        </form>

        <QuickGrid ItemsProvider="@foodRecallProvider" Pagination="@pagination" @ref="myGrid">
            <TemplateColumn Title="Имя">
                <span>@context.ToString()</span>
            </TemplateColumn>
            <TemplateColumn Align="Align.Right">
                <div class="hstack">
                    @if (context.IsBot)
                    {
                        <span class="bi bi-robot text-danger-emphasis"> TelegramBot</span>
                    }
                    else if(context.TelegramId != default)
                    {
                       <TelegramSendMessageComponent TelegramId="@context.TelegramId" /> 
                    }                    
                    @if (!string.IsNullOrEmpty(context.Email))
                    {
                        <a href="mailto:@context.Email" class="ms-2">@context.Email</a>
                        <RemoveTelegramJoinComponent TelegramUserId="context.TelegramId" />
                    }
                </div>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@pagination" />
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private FindRequestModel Input { get; set; } = new() { FindQuery = "" };

    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    string? nameFilter;
    QuickGrid<TelegramUserViewModel>? myGrid;
    int numResults;
    GridItemsProvider<TelegramUserViewModel>? foodRecallProvider;

    IEnumerable<ResultMessage>? Messages;

    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        foodRecallProvider = async req =>
        {
            TPaginationStrictResponseModel<TelegramUserViewModel> res = await TelegramRepo.FindUsersTelegramAsync(new FindRequestModel()
                {
                    FindQuery = Input.FindQuery,
                    PageNum = pagination.CurrentPageIndex,
                    PageSize = pagination.ItemsPerPage
                });

            if (res.Response is null)
            {
                string msg = "TelegramUsers is null. error {204B22F2-A5B3-4EEF-BC9B-494CEBF266E8}";
                Messages = [new ResultMessage() { TypeMessage = ResultTypesEnum.Error, Text = msg }];
                throw new Exception(msg);
            }

            if (numResults != res.TotalRowsCount)
            {
                numResults = res.TotalRowsCount;
                StateHasChanged();
            }

            return GridItemsProviderResult.From<TelegramUserViewModel>(res.Response, res.TotalRowsCount);
        };
    }

    async Task UsersFilter()
    {

        if (myGrid is not null)
            await myGrid.RefreshDataAsync();
    }
}