@inherits BlazorBusyComponentBaseModel

@inject IUsersProfilesService UsersProfilesRepo

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<tr>
    @if (isEdit)
    {
        <th scope="row" colspan="2">
            <div class="input-group input-group-sm mb-3">
                <span class="input-group-text" id="inputGroup-sizing-sm">Claim</span>
                <input disabled="@IsBusyProgress" @bind-value="claimType" @bind-value:event="oninput" type="text" placeholder="ClaimType" aria-label="Claim type" class="form-control">
                <input disabled="@IsBusyProgress" @bind-value="claimValue" @bind-value:event="oninput" type="text" placeholder="ClaimValue" aria-label="Claim value" class="form-control">
                <button @onclick="SaveClaim" disabled="@(CantSave || Claim.Equals(claimType, claimValue) || IsBusyProgress)" class="btn btn-outline-@(CantSave ? "secondary" : "success")" type="button" id="button-addon2">Сохранить</button>
                <button @onclick="CancelEdit" disabled="@IsBusyProgress" class="btn btn-outline-info" type="button" id="button-addon2">Отмена</button>
            </div>
        </th>
    }
    else
    {
        <th scope="row">@Claim.ClaimType</th>
        <td>
            @Claim.ClaimValue
            <span class="ms-1 badge text-bg-@(IsBusyProgress? "secondary" : "primary") my-btn" @onclick="() => { if(!IsBusyProgress) { isEdit = true; } }">изменить</span>
            <span class="ms-1 badge text-bg-@(IsBusyProgress ? "secondary" : (initRemoveClaim ? "danger" : "warning")) my-btn" @onclick="async () => { if(!IsBusyProgress) { await RemoveClaim(); } }">@(initRemoveClaim ? "подтвердить удаление?" : "удалить")</span>
            @if (initRemoveClaim)
            {
                <span class="ms-1 badge text-bg-light my-btn" @onclick="() => { if(!IsBusyProgress) { initRemoveClaim = false; } }">не удалять</span>
            }
        </td>
    }
</tr>

@code {
    [Parameter, EditorRequired]
    public required ClaimBaseModel Claim { get; set; }

    [Parameter, EditorRequired]
    public ClaimAreasEnum ClaimArea { get; set; }

    [Parameter, EditorRequired]
    public required string OwnerId { get; set; }

    [Parameter, EditorRequired]
    public required Action ReloadHandler { get; set; }

    bool isEdit;
    string? claimType;
    string? claimValue;

    bool CantSave => string.IsNullOrWhiteSpace(claimType) || string.IsNullOrWhiteSpace(claimValue) || Claim.Equals(claimType, claimValue);

    protected override void OnInitialized()
    {
        CancelEdit();
    }

    void CancelEdit()
    {
        claimType = Claim.ClaimType;
        claimValue = Claim.ClaimValue;
        isEdit = false;
    }

    async Task SaveClaim()
    {
        IsBusyProgress = true;
        ResponseBaseModel res = await UsersProfilesRepo.ClaimUpdateOrCreate(ClaimModel.Build(Claim.Id, claimType, claimValue, OwnerId), ClaimArea);
        IsBusyProgress = false;
        if (!res.Success())
            throw new Exception(res.Message());

        isEdit = false;
        ReloadHandler();
    }

    bool initRemoveClaim = false;
    async Task RemoveClaim()
    {
        if (!initRemoveClaim)
        {
            initRemoveClaim = true;
            return;
        }

        IsBusyProgress = true;
        ResponseBaseModel res = await UsersProfilesRepo.ClaimDelete(ClaimArea, Claim.Id);
        IsBusyProgress = false;
        initRemoveClaim = false;
        if (!res.Success())
            throw new Exception(res.Message());

        ReloadHandler();
    }
}
