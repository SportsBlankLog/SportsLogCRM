@using MudBlazor
@using System.Net.Mail
@inherits IssueWrapBaseModel
@attribute [Authorize]

<div class="card">
    @if (IsBusyProgress)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <div class="card-body p-3">
            <div class="hstack">
                <h6 class="card-title mb-2 text-body-secondary">
                    Наблюдатели
                </h6>
                <MudSpacer />
                @if (CanSubscribe)
                {
                    <i @onclick="SubscribeMeToggle" title="Subscribe to events in this dialog" style="cursor:pointer;" class="bi bi-envelope-plus-fill text-success-emphasis"> Subscribe</i>
                }
                else
                {
                    <i @onclick="SubscribeMeToggle" title="Stop following the conversation" style="cursor:pointer;" class="bi bi-envelope-x-fill text-warning-emphasis"> Unubscribe</i>
                }
            </div>

            <ul class="list-group list-group-flush">
                @if (Issue.Subscribers is null || Issue.Subscribers.Count == 0)
                {
                    <li class="list-group-item p-1 m-0">no subscribers</li>
                }
                else
                {
                    foreach (SubscriberIssueHelpDeskModelDB p in Issue.Subscribers)
                    {
                        <li class="list-group-item p-1 m-0">
                            @(UsersIdentityDump?.FirstOrDefault(x => x.UserId == p.UserId)?.UserName ?? p.UserId)
                            @if (p.UserId == CurrentUserSession!.UserId)
                            {
                                <sup title="@(p.IsSilent ? "Enable" : "disable") notifications. Now notifications @(p.IsSilent ? "disabled" : "enabled")" @onclick="async () => await NotifyBellToggle(p)" style="cursor:pointer;" class="ms-2 bi bi-bell-@(p.IsSilent ? "slash text-secondary" : "fill text-primary-emphasis")"> You</sup>
                            }
                            else
                            {
                                <sup title="Notifications @(p.IsSilent ? "turned off" : "turned on")" class="bi bi-bell-@(p.IsSilent ? "slash" : "fill") ms-2"></sup>
                            }
                        </li>
                    }
                }
            </ul>
            @if (Issue.Subscribers?.Any(x => x.UserId == CurrentUserSession!.UserId) != true && (Issue.AuthorIdentityUserId == CurrentUserSession!.UserId || Issue.ExecutorIdentityUserId == CurrentUserSession!.UserId))
            {
                <div title="You do not have an explicit subscription, but you are a direct participant" class="card-footer">
                    Are you a member
                </div>
            }
            <div class="mt-2" title="adding observers to a request">
                <label for="exampleFormControlInput1" class="form-label">Invite a participant</label>
                <div class="input-group">
                    <input @bind-value="addingSubscriber" @bind-value:event="oninput" id="exampleFormControlInput1" class="form-control form-control-sm" placeholder="Email member" type="email">
                    <button @onclick="AddSubscriber" disabled="@(!MailAddress.TryCreate(addingSubscriber,out _))" title="add" class="btn btn-outline-secondary bi bi-person-plus-fill" type="button"></button>
                </div>
            </div>
        </div>
    }
</div>