@inherits FormBaseModel

<div class="card mb-2">
    <div class="card-body">
        <div class="@FormMetadata.Css" title="@(string.IsNullOrWhiteSpace(FormMetadata.Description) ? "" : string.Join(" ", GlobalTools.DescriptionHtmlToLinesRemark(FormMetadata.Description)))">
            @foreach (BaseRequiredFormFitModel field in FormMetadata.AllFields)
            {
                <div class="@field.Css" title="@(string.IsNullOrWhiteSpace(field.Description) ? "" : string.Join(" ", GlobalTools.DescriptionHtmlToLinesRemark(field.Description)))">
                    @if (field is FieldFitModel bf)
                    {
                        switch (bf.TypeField)
                        {
                            case TypesFieldsFormsEnum.Bool:
                                <CheckBoxComponent IsChecked="BoolSimpleValue(bf)" IsCheckedChanged="(e) => SetSimpleFieldBoolValue(bf, e)" Label="@field.Name" Hint="@field.Description" Id="@GetFieldDomId(bf)" Required="@field.Required" />
                                break;
                            case TypesFieldsFormsEnum.Int:
                                <IntMudFieldComponent Value="IntSimpleValue(bf)" ValueChanged="(e) => SetSimpleFieldIntValue(bf, e)" Label="@field.Name" Hint="@field.Description" Id="@GetFieldDomId(bf)" Required="@field.Required" />
                                break;
                            case TypesFieldsFormsEnum.Double:
                                <DoubleMudFieldComponent Value="DoubleSimpleValue(bf)" ValueChanged="(e) => SetSimpleFieldDoubleValue(bf, e)" Label="@field.Name" Hint="@field.Description" Id="@GetFieldDomId(bf)" Required="@field.Required" />
                                break;
                            case TypesFieldsFormsEnum.DateTime:
                                <DateTimeMudComponent Value="DateTimeSimpleValue(bf)" ValueChanged="(e) => SetSimpleFieldDateTimeValue(bf, e)" Label="@field.Name" Hint="@field.Description" Id="@GetFieldDomId(bf)" Required="@field.Required" />
                                break;
                            case TypesFieldsFormsEnum.Date:
                                <DateMudComponent Value="DateOnlySimpleValue(bf)" ValueChanged="(e) => SetSimpleFieldDateOnlyValue(bf, e)" Label="@field.Name" Hint="@field.Description" Id="@GetFieldDomId(bf)" Required="@field.Required" />
                                break;
                            case TypesFieldsFormsEnum.Time:
                                <TimeMudComponent Value="TimeOnlySimpleValue(bf)" ValueChanged="(e) => SetSimpleFieldTimeOnlyValue(bf, e)" Label="@field.Name" Hint="@field.Description" Id="@GetFieldDomId(bf)" Required="@field.Required" />
                                break;
                            case TypesFieldsFormsEnum.Text or TypesFieldsFormsEnum.Password:
                                <TextMudComponent Value="@StringSimpleValue(bf)" ValueChanged="(e) => SetSimpleFieldStringValue(bf, e)" AsPassword="bf.TypeField == TypesFieldsFormsEnum.Password" Label="@field.Name" Hint="@field.Description" Id="@GetFieldDomId(bf)" Required="@field.Required" />
                                break;
                            case TypesFieldsFormsEnum.ProgramCalculationDouble:
                                <div class="alert alert-primary" role="alert">
                                    TypesFieldsFormsEnum.ProgramCalculationDouble
                                </div>
                                break;
                            case TypesFieldsFormsEnum.Generator:
                                <div class="alert alert-primary" role="alert">
                                    TypesFieldsFormsEnum.Generator
                                </div>
                                break;
                            default:
                                <div class="alert alert-danger" role="alert">
                                    Не известный вид поля: @bf.TypeField
                                </div>
                                break;
                        }
                    }
                    else if (field is FieldAkaDirectoryFitModel df)
                    {
                        <SelectFieldMudComponent Label="@field.Name" Hint="@field.Description" Id="@GetFieldDomId(df)" Required="@field.Required" />
                    }
                    else
                    {
                        <div class="alert alert-danger" role="alert">
                            Не известный тип поля: @field.GetType().FullName
                        </div>
                    }
                    <p>@field.Name</p>
                </div>
            }
        </div>
        @if (IsEdited)
        {
            <div class="btn-toolbar justify-content-end" role="toolbar">
                <div class="btn-group btn-group-sm" role="group">
                    <button @onclick="SaveForm" type="button" class="btn btn-outline-primary">Сохранить...</button>
                    <button @onclick="ResetForm" type="button" class="btn btn-outline-primary">Отмена</button>
                </div>
            </div>
        }
    </div>
</div>