@inherits FormBaseModel

<div class="card mb-2">
    <div class="card-body">
        <CascadingValue Value="this">
            <div class="@FormMetadata.Css" title="@(string.IsNullOrWhiteSpace(FormMetadata.Description) ? "" : string.Join(" ", GlobalTools.DescriptionHtmlToLinesRemark(FormMetadata.Description)))">
                @{
                    int i = -1;
                }
                @foreach (BaseRequiredFormFitModel field in FormMetadata.AllFields)
                {
                    i++;
                    FieldFormBaseLowConstructorModel _field_c = Form.AllFields[i];
                    <div class="@field.Css" title="@(string.IsNullOrWhiteSpace(field.Description) ? "" : string.Join(" ", GlobalTools.DescriptionHtmlToLinesRemark(field.Description)))">
                        @if (field is FieldFitModel bf)
                        {
                            FieldFormConstructorModelDB _field_b = (FieldFormConstructorModelDB)_field_c;
                            switch (bf.TypeField)
                            {
                                case TypesFieldsFormsEnum.Bool:
                                    <CheckBoxComponent Value="BoolSimpleValue(bf, _field_b)" ValueChanged="(e) => SetSimpleFieldValue(bf, e.ToString(), _field_b)" Label="@bf.Name" Hint="@bf.Description" Id="@GetFieldDomId(bf)" Required="@bf.Required" />
                                    break;
                                case TypesFieldsFormsEnum.Int:
                                    <IntMudFieldComponent Value="IntSimpleValue(bf, _field_b)" ValueChanged="(e) => SetSimpleFieldValue(bf, e.ToString(), _field_b)" Label="@bf.Name" Hint="@bf.Description" Id="@GetFieldDomId(bf)" Required="@bf.Required" />
                                    break;
                                case TypesFieldsFormsEnum.Double:
                                    <DoubleMudFieldComponent Value="DoubleSimpleValue(bf, _field_b)" ValueChanged="(e) => SetSimpleFieldValue(bf, e.ToString(), _field_b)" Label="@bf.Name" Hint="@bf.Description" Id="@GetFieldDomId(bf)" Required="@bf.Required" />
                                    break;
                                case TypesFieldsFormsEnum.DateTime:
                                    <DateTimeMudComponent Value="DateTimeSimpleValue(bf, _field_b)" ValueChanged="(e) => SetSimpleFieldValue(bf, e.ToString(), _field_b)" Label="@bf.Name" Hint="@bf.Description" Id="@GetFieldDomId(bf)" Required="@bf.Required" />
                                    break;
                                case TypesFieldsFormsEnum.Date:
                                    <DateMudComponent Value="DateOnlySimpleValue(bf, _field_b)" ValueChanged="(e) => SetSimpleFieldValue(bf, e.ToString(), _field_b)" Label="@bf.Name" Hint="@bf.Description" Id="@GetFieldDomId(bf)" Required="@bf.Required" />
                                    break;
                                case TypesFieldsFormsEnum.Time:
                                    <TimeMudComponent Value="TimeOnlySimpleValue(bf, _field_b)" ValueChanged="(e) => SetSimpleFieldValue(bf, e.ToString(), _field_b)" Label="@bf.Name" Hint="@bf.Description" Id="@GetFieldDomId(bf)" Required="@bf.Required" />
                                    break;
                                case TypesFieldsFormsEnum.Text or TypesFieldsFormsEnum.Password:
                                    <TextMudComponent Value="@StringSimpleValue(bf, _field_b)" ValueChanged="(e) => SetSimpleFieldValue(bf, e, _field_b)" AsPassword="bf.TypeField == TypesFieldsFormsEnum.Password" Label="@bf.Name" Hint="@bf.Description" Id="@GetFieldDomId(bf)" Required="@bf.Required" />
                                    break;
                                case TypesFieldsFormsEnum.ProgramCalculationDouble:
                                    <div class="alert alert-primary" role="alert">
                                        TypesFieldsFormsEnum.ProgramCalculationDouble
                                    </div>
                                    break;
                                case TypesFieldsFormsEnum.Generator:
                                    <div class="alert alert-primary" role="alert">
                                        TypesFieldsFormsEnum.Generator
                                    </div>
                                    break;
                                default:
                                    <div class="alert alert-danger" role="alert">
                                        Не известный вид поля: @bf.TypeField
                                    </div>
                                    break;
                            }
                        }
                        else if (field is FieldAkaDirectoryFitModel df)
                        {
                            FieldFormAkaDirectoryConstructorModelDB _field_p = (FieldFormAkaDirectoryConstructorModelDB)_field_c;
                            if (df.IsMultiSelect)
                            {
                                <SelectFieldMudMultiselectComponent Entries="@df.Items" Label="@df.Name" Hint="@df.Description" Id="@GetFieldDomId(df)" Required="@df.Required" Value="DictsValue(df, _field_p)" ValueChanged="(e) => SetSimpleFieldValue(df, e, _field_p)" />
                            }
                            else
                            {
                                <SelectFieldMudComponent Entries="@df.Items" Label="@df.Name" Hint="@df.Description" Id="@GetFieldDomId(df)" Required="@df.Required" Value="DictValue(df, _field_p)" ValueChanged="(e) => SetDirectoryFieldValue(df, e, _field_p)" />
                            }
                        }
                        else
                        {
                            <div class="alert alert-danger" role="alert">
                                Не известный тип поля: @field.GetType().FullName
                            </div>
                        }
                    </div>
                }
            </div>
        </CascadingValue>
        @if (IsEdited)
        {
            <div class="btn-toolbar justify-content-end my-3" role="toolbar">
                <div class="btn-group btn-group-sm" role="group">
                    <button @onclick="SaveForm" type="button" class="btn btn-outline-primary">Сохранить...</button>
                    <button @onclick="ResetForm" type="button" class="btn btn-outline-primary">Отмена</button>
                </div>
            </div>
        }
    </div>
</div>