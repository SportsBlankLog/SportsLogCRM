// <auto-generated />
using System;
using DbcLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbSqliteLib.Migrations.Helpdesk
{
    [DbContext(typeof(HelpdeskContext))]
    partial class HelpdeskContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("SharedLib.AnonymTelegramAccessHelpdeskModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TokenAccess")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("TokenAccess")
                        .IsUnique();

                    b.ToTable("AccessTokens");
                });

            modelBuilder.Entity("SharedLib.AnswerToForwardModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("ForwardMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResultMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResultMessageTelegramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtUtc");

                    b.HasIndex("ForwardMessageId");

                    b.HasIndex("ResultMessageId");

                    b.HasIndex("ResultMessageTelegramId");

                    b.ToTable("AnswersToForwards");
                });

            modelBuilder.Entity("SharedLib.ForwardMessageTelegramBotModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<long>("DestinationChatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResultMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResultMessageTelegramId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SourceChatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SourceMessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAtUtc");

                    b.HasIndex("ResultMessageId");

                    b.HasIndex("ResultMessageTelegramId");

                    b.HasIndex("DestinationChatId", "SourceChatId", "SourceMessageId");

                    b.ToTable("ForwardedMessages");
                });

            modelBuilder.Entity("SharedLib.IssueHelpdeskModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorIdentityUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExecutorIdentityUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedDescriptionUpper")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedNameUpper")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RubricIssueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StepIssue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("RubricIssueId");

                    b.HasIndex("AuthorIdentityUserId", "ExecutorIdentityUserId", "LastUpdateAt");

                    b.ToTable("Issues");
                });

            modelBuilder.Entity("SharedLib.IssueMessageHelpdeskModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("IssueId");

                    b.HasIndex("CreatedAt", "LastUpdateAt");

                    b.ToTable("IssuesMessages");
                });

            modelBuilder.Entity("SharedLib.IssueReadMarkerHelpdeskModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastReadAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserIdentityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("LastReadAt", "UserIdentityId")
                        .IsUnique();

                    b.ToTable("IssueReadMarkers");
                });

            modelBuilder.Entity("SharedLib.LockUniqueTokenModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("Lockers");
                });

            modelBuilder.Entity("SharedLib.PulseIssueModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorUserIdentityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PulseType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tag")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserIdentityId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IssueId");

                    b.HasIndex("PulseType");

                    b.HasIndex("Tag");

                    b.ToTable("PulseEvents");
                });

            modelBuilder.Entity("SharedLib.RubricIssueHelpdeskModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContextName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedNameUpper")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentRubricId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SortIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsDisabled");

                    b.HasIndex("Name");

                    b.HasIndex("ParentRubricId");

                    b.HasIndex("SortIndex", "ParentRubricId")
                        .IsUnique();

                    b.ToTable("RubricsForIssues");
                });

            modelBuilder.Entity("SharedLib.SubscriberIssueHelpdeskModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSilent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IssueId");

                    b.HasIndex("UserId", "IssueId")
                        .IsUnique();

                    b.ToTable("SubscribersOfIssues");
                });

            modelBuilder.Entity("SharedLib.VoteHelpdeskModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IssueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("IssueId");

                    b.HasIndex("MessageId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("SharedLib.AnswerToForwardModelDB", b =>
                {
                    b.HasOne("SharedLib.ForwardMessageTelegramBotModelDB", "ForwardMessage")
                        .WithMany("Answers")
                        .HasForeignKey("ForwardMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForwardMessage");
                });

            modelBuilder.Entity("SharedLib.IssueHelpdeskModelDB", b =>
                {
                    b.HasOne("SharedLib.RubricIssueHelpdeskModelDB", "RubricIssue")
                        .WithMany("Issues")
                        .HasForeignKey("RubricIssueId");

                    b.Navigation("RubricIssue");
                });

            modelBuilder.Entity("SharedLib.IssueMessageHelpdeskModelDB", b =>
                {
                    b.HasOne("SharedLib.IssueHelpdeskModelDB", "Issue")
                        .WithMany("Messages")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("SharedLib.IssueReadMarkerHelpdeskModelDB", b =>
                {
                    b.HasOne("SharedLib.IssueHelpdeskModelDB", "Issue")
                        .WithMany("ReadMarkers")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("SharedLib.PulseIssueModelDB", b =>
                {
                    b.HasOne("SharedLib.IssueHelpdeskModelDB", "Issue")
                        .WithMany("PulseEvents")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("SharedLib.RubricIssueHelpdeskModelDB", b =>
                {
                    b.HasOne("SharedLib.RubricIssueHelpdeskModelDB", "ParentRubric")
                        .WithMany("NestedRubrics")
                        .HasForeignKey("ParentRubricId");

                    b.Navigation("ParentRubric");
                });

            modelBuilder.Entity("SharedLib.SubscriberIssueHelpdeskModelDB", b =>
                {
                    b.HasOne("SharedLib.IssueHelpdeskModelDB", "Issue")
                        .WithMany("Subscribers")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("SharedLib.VoteHelpdeskModelDB", b =>
                {
                    b.HasOne("SharedLib.IssueHelpdeskModelDB", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedLib.IssueMessageHelpdeskModelDB", "Message")
                        .WithMany("Votes")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SharedLib.ForwardMessageTelegramBotModelDB", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SharedLib.IssueHelpdeskModelDB", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("PulseEvents");

                    b.Navigation("ReadMarkers");

                    b.Navigation("Subscribers");
                });

            modelBuilder.Entity("SharedLib.IssueMessageHelpdeskModelDB", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("SharedLib.RubricIssueHelpdeskModelDB", b =>
                {
                    b.Navigation("Issues");

                    b.Navigation("NestedRubrics");
                });
#pragma warning restore 612, 618
        }
    }
}
