// <auto-generated />
using System;
using DbcLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DbPostgreLib.Migrations.ApiRusklimatCom
{
    [DbContext(typeof(ApiRusklimatComContext))]
    [Migration("20250413072251_ApiRusklimatComContext001")]
    partial class ApiRusklimatComContext001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SharedLib.CategoryRusklimatModelDB", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Parent")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Parent");

                    b.ToTable("Categories", "public");
                });

            modelBuilder.Entity("SharedLib.ProductInformationRusklimatModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ProductId");

                    b.HasIndex("TypeInfo");

                    b.ToTable("ProductsInformation", "public");
                });

            modelBuilder.Entity("SharedLib.ProductPropertyRusklimatModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PropertyKey")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PropertyKey");

                    b.ToTable("ProductsProperties", "public");
                });

            modelBuilder.Entity("SharedLib.ProductRusklimatModelDB", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text");

                    b.Property<decimal>("ClientPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Exclusive")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("InternetPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("NSCode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("RemainsId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VendorCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("RemainsId")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.ToTable("Products", "public");
                });

            modelBuilder.Entity("SharedLib.PropertyRusklimatModelDB", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Sort");

                    b.ToTable("PropertiesCatalog", "public");
                });

            modelBuilder.Entity("SharedLib.RemainsRusklimatModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Total")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Total");

                    b.ToTable("Remains", "public");
                });

            modelBuilder.Entity("SharedLib.UnitRusklimatModelDB", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IntAbbr")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameFull")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Units", "public");
                });

            modelBuilder.Entity("SharedLib.WarehouseRemainsRusklimatModelDB", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("RemainValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.HasIndex("RemainValue");

                    b.ToTable("WarehousesRemains", "public");
                });

            modelBuilder.Entity("SharedLib.ProductInformationRusklimatModelDB", b =>
                {
                    b.HasOne("SharedLib.ProductRusklimatModelDB", "Product")
                        .WithMany("Information")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SharedLib.ProductPropertyRusklimatModelDB", b =>
                {
                    b.HasOne("SharedLib.ProductRusklimatModelDB", "Product")
                        .WithMany("Properties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SharedLib.ProductRusklimatModelDB", b =>
                {
                    b.HasOne("SharedLib.RemainsRusklimatModelDB", "Remains")
                        .WithOne("Product")
                        .HasForeignKey("SharedLib.ProductRusklimatModelDB", "RemainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Remains");
                });

            modelBuilder.Entity("SharedLib.WarehouseRemainsRusklimatModelDB", b =>
                {
                    b.HasOne("SharedLib.RemainsRusklimatModelDB", "Parent")
                        .WithMany("WarehousesRemains")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SharedLib.ProductRusklimatModelDB", b =>
                {
                    b.Navigation("Information");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("SharedLib.RemainsRusklimatModelDB", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("WarehousesRemains");
                });
#pragma warning restore 612, 618
        }
    }
}
