@page "/Account/ForgotPassword"

@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IUsersProfilesService UsersProfilesRepo

<PageTitle>Забыли пароль?</PageTitle>

<h1>Забыли пароль?</h1>
<StatusMessage Messages="@Messages" />
<h2>Введите адрес электронной почты.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Сброс пароля</button>
            <p class="text-warning">Обращаем внимание, что письмо с восстановлением пароля может прийти в спам !</p>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private EmailSingleModel Input { get; set; } = new();

    List<ResultMessage> Messages = [];

    private async Task OnValidSubmitAsync()
    {
        UserInfoModel? user = await UsersProfilesRepo.FindByEmailAsync(Input.Email);
        if (user is null)
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");

        UserBooleanResponseModel email_is_confirmed_rest = await UsersProfilesRepo.IsEmailConfirmedAsync(user.UserId);
        if (user is null || !email_is_confirmed_rest.Success() || email_is_confirmed_rest.Response != true)
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }
        Messages.AddRange(email_is_confirmed_rest.Messages);

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        TResponseModel<string?> code_rest = await UsersProfilesRepo.GeneratePasswordResetTokenAsync(user.UserId);
        Messages.AddRange(code_rest.Messages);
        if (string.IsNullOrEmpty(code_rest.Response))
            throw new Exception("PasswordResetToken is null. error {92318C2E-0997-4737-B746-73698FB38B39}");

        ResponseBaseModel send_pass_reset_rest = await UsersProfilesRepo.SendPasswordResetLinkAsync(Input.Email, NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri, code_rest.Response, user.UserId);
        Messages.AddRange(send_pass_reset_rest.Messages);
        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }
}