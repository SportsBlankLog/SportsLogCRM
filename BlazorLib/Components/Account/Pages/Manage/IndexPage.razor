@page "/Account/Manage"

@inject IdentityRedirectManager RedirectManager
@inject IUsersProfilesService UsersProfilesRepo

<PageTitle>Профиль</PageTitle>
<h3>Профиль</h3>
<StatusMessage Messages="@Messages" />
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Пожалуйста, введите ваш логин." disabled />
                <label for="username" class="form-label">Имя пользователя</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Пожалуйста введите ваш номер телефона." />
                <label for="phone-number" class="form-label">Номер телефона</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Сохранить</button>
        </EditForm>
    </div>
</div>

@code {
    [Inject]
    AuthenticationStateProvider authRepo { get; set; } = default!;

    [SupplyParameterFromForm]
    private PhoneSingleModel Input { get; set; } = new();

    UserInfoMainModel? user;
    private string? username;
    private string? phoneNumber;
    List<ResultMessage> Messages = [];

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState state = await authRepo.GetAuthenticationStateAsync();
        user = state.User.ReadCurrentUserInfo();

        TResponseModel<string?> username_rest = await UsersProfilesRepo.GetUserNameAsync();
        Messages.AddRange(username_rest.Messages);
        username = username_rest.Response;

        TResponseModel<string?> phone_number_rest = await UsersProfilesRepo.GetPhoneNumberAsync();
        Messages.AddRange(phone_number_rest.Messages);
        phoneNumber = phone_number_rest.Response;

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        Messages = [];
        ResponseBaseModel rest;
        if (Input.PhoneNumber != phoneNumber)
        {
            rest = await UsersProfilesRepo.SetPhoneNumberAsync(Input.PhoneNumber);
            Messages = rest.Messages;
            if (!rest.Success())
            {
                Messages.Add(new() { TypeMessage = ResultTypesEnum.Error, Text = "Ошибка: Не удалось установить номер телефона." });
                return;
            }
        }
        rest = await UsersProfilesRepo.RefreshSignInAsync();
        Messages.AddRange(rest.Messages);
        Messages.Add(new() { TypeMessage = ResultTypesEnum.Info, Text = "Ваш профиль был обновлен" });
    }
}