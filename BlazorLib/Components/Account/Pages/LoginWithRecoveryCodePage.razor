@page "/Account/LoginWithRecoveryCode"

@inject IdentityRedirectManager RedirectManager
@inject IUsersAuthenticateService UsersAuthRepo

<PageTitle>Checking the recovery code</PageTitle>

<h1>Checking the recovery code</h1>
<hr />
<StatusMessage Messages="@Messages" />
<p>
    You have requested a login with a recovery code. This login will not be remembered until you provide the authenticator app code when you log in or turn off 2FA and log in again.
</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.RecoveryCode" class="form-control" autocomplete="off" placeholder="RecoveryCode" />
                <label for="recovery-code" class="form-label">Recovery code</label>
                <ValidationMessage For="() => Input.RecoveryCode" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-lg btn-primary">Login</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private RecoveryCodeSingleModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    IEnumerable<ResultMessage>? Messages;

    protected override async Task OnInitializedAsync()
    {
        TResponseModel<UserInfoModel?> user = await UsersAuthRepo.GetTwoFactorAuthenticationUserAsync();
        Messages = user.Messages;
        if (user.Response is null)
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        Messages = null;
        string recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);
        IdentityResultResponseModel result = await UsersAuthRepo.TwoFactorRecoveryCodeSignInAsync(recoveryCode);
        Messages = result.Messages;

        if (result.Success())
            RedirectManager.RedirectTo(ReturnUrl);
        else if (result.IsLockedOut == true)
            RedirectManager.RedirectTo("Account/Lockout");
    }
}