@implements IDisposable

@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlankBlazorApp</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        @foreach (NavItemModel nav_item in NavMainMenu.NavMenuItems)
        {
            if (string.IsNullOrWhiteSpace(nav_item.AuthorizeViewRoles))
            {
                <div class="nav-item px-3">
                    <NavLink class="nav-link px-3" href="@(nav_item.HrefNav)" Match="@(nav_item.IsNavLinkMatchAll?NavLinkMatch.All: NavLinkMatch.Prefix)">
                        <span aria-hidden="true"></span> @nav_item.Title
                    </NavLink>
                </div>
            }
            else if (nav_item.AuthorizeViewRoles.Trim().Equals("*"))
            {
                <AuthorizeView>
                    <Authorized>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link px-3" href="@(nav_item.HrefNav)" Match="@(nav_item.IsNavLinkMatchAll?NavLinkMatch.All: NavLinkMatch.Prefix)">
                                <span aria-hidden="true"></span> @nav_item.Title
                            </NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>
            }
            else
            {
                <AuthorizeView Roles="@nav_item.AuthorizeViewRoles">
                    <Authorized>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link px-3" href="@(nav_item.HrefNav)" Match="@(nav_item.IsNavLinkMatchAll?NavLinkMatch.All: NavLinkMatch.Prefix)">
                                <span aria-hidden="true"></span> @nav_item.Title
                            </NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>
            }
        }

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link px-3" href="Account/Manage">
                        <span aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link px-2">
                            <span aria-hidden="true"></span> Выход
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link px-3" href="Account/Register">
                        <span aria-hidden="true"></span> Регистрация
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link px-3" href="Account/Login">
                        <span aria-hidden="true"></span> Вход
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    [CascadingParameter, EditorRequired]
    public required NavMainMenuModel NavMainMenu { get; set; }

    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}