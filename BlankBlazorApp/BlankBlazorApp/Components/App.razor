@using Microsoft.Extensions.Options
@using BlazorLib.Components.Shared
@using MudBlazor
@using SharedLib

@inject ISerializeStorageRemoteTransmissionService StoreRepo
@inject ITelegramRemoteTransmissionService tgRemoteCall
@inject IOptions<TelegramBotConfigModel> webConfig
@inject NavigationManager NavigatorRepo
@inject ISnackbar SnackbarRepo

<!DOCTYPE html>
<html lang="ru" data-bs-theme="dark">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="/lib/bootstrap-icons/font/bootstrap-icons.min.css?version=@GlobalStaticConstants.InitSalt">
    <link rel="stylesheet" href="/lib/jqueryui/jquery-ui.min.css?version=@GlobalStaticConstants.InitSalt" />
    <link rel="stylesheet" href="/lib/bootstrap/css/bootstrap.min.css?version=@GlobalStaticConstants.InitSalt" />
    <link rel="stylesheet" href="app.css?version=@GlobalStaticConstants.InitSalt" />
    <link rel="stylesheet" href="/js/ckeditor5/ckeditor5.css?version=@GlobalStaticConstants.InitSalt" />
    <link rel="stylesheet" href="BlankBlazorApp.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <script type="text/javascript">
        window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        triggerFileDownload(fileName, url);
        URL.revokeObjectURL(url);
        };
        window.triggerFileDownload = (fileName, url) => {
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        };
    </script>
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script src="/lib/jquery/jquery.min.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script src="/lib/jqueryui/jquery-ui.min.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script src="/js/ckeditor5/ckeditor.js?version=@GlobalStaticConstants.InitSalt"></script>
    @* <script src="/lib/ckeditor5/ckeditor.js?version=@GlobalStaticConstants.InitSalt"></script> *@
    <script src="/js/CKEditorInterop.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script src="/lib/tinymce/tinymce.min.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    @* <script src="https://www.google.com/recaptcha/api.js" async defer></script> *@
    <script src="/js/scriptLoader.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script src="/js/JsOfReCAPTCHA.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script src="/js/site.js?version=@GlobalStaticConstants.InitSalt"></script>
    <script>
        window.onBlazorReady = () => {
        $(document).tooltip({
        track: true
        });
        };
        window.tooltipeHide = () => {
        $("div.ui-tooltip").hide();
        };
    </script>
</body>
</html>

@code {
    static bool _isLoaded = false;
    protected override async Task OnInitializedAsync()
    {
        if (webConfig.Value.BaseUri is null)
            webConfig.Value.BaseUri = NavigatorRepo.BaseUri;

        if (!_isLoaded)
        {
            _isLoaded = true;
            if (ServiceProviderExtensions.SetRemoteConf?.Success() != true)
            {
                Task<TResponseModel<object?>>[] _tasks = [tgRemoteCall.SetWebConfigTelegram(webConfig.Value, false), tgRemoteCall.SetWebConfigHelpdesk(webConfig.Value, false), tgRemoteCall.SetWebConfigStorage(webConfig.Value, false)];
                await Task.WhenAll(_tasks);
            }

        }

    }
}